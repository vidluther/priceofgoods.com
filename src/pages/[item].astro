---
import Layout from "../layouts/Layout.astro";
import { fetchGoodsConfig } from '../lib/fetchUtils';
import { processItemData, regions } from '../lib/dataUtils';
import { slugify } from '../lib/stringUtilities';
import StaticItemInfo from '../components/StaticItemInfo.astro';
import RegionalComparison from '../components/RegionalComparison.astro';
import PriceHistoryChart from '../components/react/PriceHistoryChart';

// Generate all possible item routes
export async function getStaticPaths() {
  const goodsConfig = await fetchGoodsConfig();
  const allItems = Object.values(goodsConfig.categories).reduce((items, category) => {
    return {
      ...items,
      ...category.items
    };
  }, {});

  const paths = await Promise.all(
    Object.values(allItems).map(async (item) => {
      const itemData = await processItemData(item.dataKey);
      return {
        params: { item: slugify(item.name) },
        props: {
          itemInfo: item,
          itemData
        }
      };
    })
  );
  return paths;
}

const { item } = Astro.params;
const { itemInfo, itemData } = Astro.props;

const title = `Average Price of ${itemInfo.name} per ${itemInfo.unit}`;
const description = `Monitor ${itemInfo.name.toLowerCase()} prices from monthly US Bureau of Labor Statistics reports. View 1-year, 4-year, and 20-year historical price trends, with official national and regional averages.`;

// Create JSON-LD structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Product",
  name: itemInfo.name,
  description: `Current and historical prices for ${itemInfo.name} in the United States`,
  offers: {
    "@type": "AggregateOffer",
    priceCurrency: "USD",
    price: itemData.currentPrices.national.value,
    lowPrice: Math.min(...itemData.history.map(h => h.value)),
    highPrice: Math.max(...itemData.history.map(h => h.value)),
    priceValidUntil: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
    availability: "https://schema.org/InStock"
  },
  additionalProperty: [
    {
      "@type": "PropertyValue",
      name: "unit",
      value: itemInfo.unit
    },
    {
      "@type": "PropertyValue",
      name: "data_source",
      value: "US Bureau of Labor Statistics"
    }
  ],
  temporalCoverage: `${itemData.history[0].year}/${itemData.history[itemData.history.length - 1].year}`
};

// Create breadcrumb structured data
const breadcrumbData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: "https://priceofgoods.com"
    },
    {
      "@type": "ListItem",
      position: 2,
      name: itemInfo.name,
      item: `https://priceofgoods.com/${slugify(itemInfo.name)}`
    }
  ]
};
---

<Layout
    title={title}
    description={description}
    ogImage={{
      type: 'items',
      slug: itemInfo.dataKey
    }}
>
  <!-- Add structured data to head -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbData)} />

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <StaticItemInfo
      item={itemInfo}
      currentPrice={itemData.currentPrices.national}
    />

    <div class="h-px bg-gray-200 my-8"></div>

    <RegionalComparison
      item={itemInfo}
      prices={itemData.currentPrices}
      regions={regions}
    />

    <div class="h-px bg-gray-200 my-8"></div>

    <div class="bg-white rounded-lg shadow-lg p-6">
      <PriceHistoryChart
        item={itemInfo}
        historyData={itemData.history}
        regions={regions}
        client:visible
      />
    </div>
  </div>
</Layout>
